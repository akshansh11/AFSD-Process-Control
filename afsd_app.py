# -*- coding: utf-8 -*-
"""afsd_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jRFrXxZ9kv3lfKFuchfbH-8Vb6zqDEsl
"""

import numpy as np
import matplotlib.pyplot as plt
import streamlit as st

# Function for saturation
def saturate(value, min_val, max_val):
    return max(min(value, max_val), min_val)

# Streamlit App
st.title('AFSD Process Control Simulation')

# Display the image
st.image("afsd app.jpg")

# User inputs for control parameters
kp_T = st.sidebar.number_input('kp_T', value=5.00, step=0.1)
ki_T = st.sidebar.number_input('ki_T', value=0.20, step=0.01)
kp_F = st.sidebar.number_input('kp_F', value=5.00e-4, step=0.0001)
ki_F = st.sidebar.number_input('ki_F', value=7.50e-4, step=0.0001)
omega_nom = st.sidebar.number_input('omega_nom', value=300, step=10)
omega_min = st.sidebar.number_input('omega_min', value=150, step=10)
omega_max = st.sidebar.number_input('omega_max', value=500, step=10)
zeta_nom = st.sidebar.number_input('zeta_nom', value=10, step=1)
zeta_min = st.sidebar.number_input('zeta_min', value=1, step=1)
zeta_max = st.sidebar.number_input('zeta_max', value=20, step=1)
T_desired = st.sidebar.number_input('T_desired', value=420, step=10)
F_desired = st.sidebar.number_input('F_desired', value=2669, step=10)

# Constants and initial values
kf = 9613
dt = 0.1  # time step
time = np.arange(0, 200, dt)

# Initialize arrays for logging
T_log = []
F_log = []
omega_log = []
zeta_log = []
time_log = []

# Initial values
T = 400
F = 2500
omega = omega_nom
zeta = zeta_nom
T_integral = 0
F_integral = 0

# Simulation loop
for t in time:
    # Temperature control
    T_error = T_desired - T
    T_integral += T_error * dt
    omega_adjusted = kp_T * T_error + ki_T * T_integral
    omega = saturate(omega_nom + omega_adjusted, omega_min, omega_max)

    # Force control
    F_error = F_desired - F
    F_integral += F_error * dt
    zeta_adjusted = kp_F * F_error + ki_F * F_integral
    zeta = saturate(zeta_nom + zeta_adjusted, zeta_min, zeta_max)

    # Log values
    T_log.append(T)
    F_log.append(F)
    omega_log.append(omega)
    zeta_log.append(zeta)
    time_log.append(t)

    # Update T and F (simulate measurements)
    T += (T_desired - T) * 0.01  # simplified model for demonstration
    F += (F_desired - F) * 0.01  # simplified model for demonstration

# Convert logs to arrays for contour plotting
T_log = np.array(T_log)
F_log = np.array(F_log)
time_log = np.array(time_log)

# Create a 2D grid for the contour plot
T_grid, F_grid = np.meshgrid(time_log, F_log)
Z_grid = np.zeros_like(T_grid)

for i in range(len(time_log)):
    for j in range(len(F_log)):
        Z_grid[j, i] = (T_desired - T_log[j]) + (F_desired - F_log[j])

# Plot results
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))

ax1.plot(time, T_log, label='Measured Temperature')
ax1.plot(time, [T_desired]*len(time), '--', label='Desired Temperature')
ax1.set_xlabel('Time (s)')
ax1.set_ylabel('Temperature (Â°C)')
ax1.legend()

ax2.plot(time, F_log, label='Measured Force')
ax2.plot(time, [F_desired]*len(time), '--', label='Desired Force')
ax2.set_xlabel('Time (s)')
ax2.set_ylabel('Force (N)')
ax2.legend()

plt.tight_layout()
st.pyplot(fig)

# Dynamic contour plot
fig_contour, ax_contour = plt.subplots(figsize=(10, 6))
contour = ax_contour.contourf(T_grid, F_grid, Z_grid, cmap='coolwarm')
fig_contour.colorbar(contour)
ax_contour.set_xlabel('Time (s)')
ax_contour.set_ylabel('Force (N)')
ax_contour.set_title('Dynamic Contour Plot of Temperature over Time and Force')

st.pyplot(fig_contour)